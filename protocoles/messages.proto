syntax = "proto3";

// add a message :
// first create the structure => message MessageType {attributes}
// then add the messagetype into the MessageServer or MessageClient "oneof"


/*****************************************************************************
 *                           Usefull Structures                              *
 *****************************************************************************/

// Image structure for avatar and conversation picture
message Image {
  int32 width = 1;
  int32 height = 2;
  bytes image_data = 3;
}

// prepare structure for user info
message UserInfo {
  int64 user_id = 1;
  Image avatar = 2;
  string name = 3;
}

// prepare structure for conversation info

message ConvContent {
  int64 user_id = 1;
  bytes text_content = 2;
}

message ConvMember {
  int64 user_id = 1;
  string member_name = 2;
}

message ConvInfo {
  int64 conv_id = 1;
  string conv_name = 2;
  Image picture = 3;
  repeated ConvMember members = 4;
  repeated ConvContent content = 5;
}

/*****************************************************************************
 *                           INIT MESSAGES                                   *
 *****************************************************************************/

// Client -( Init )-> Server
message SignIn {
  int64 destination_id = 1;
  int64 sender_id = 2;
  string username = 3;
  string password = 4;
}

// Server -( Init )-> Client
message SignedIn {
  int64 destination_id = 1;
  int64 sender_id = 2;
}

// Client -( Init )-> Server
message SignOut {
  int64 destination_id = 1;
  int64 sender_id = 2;
}

// Server -( Init )-> Client
message SignedOut {
  int64 destination_id = 1;
  int64 sender_id = 2;
}

// Client -( Init )-> Server
message SignUp {
  int64 destination_id = 1;
  int64 sender_id = 2;
  string username = 3;
  string password = 4;
  string mail_adr = 5;
  bytes ssh_key = 6;
}

// Client -( Init )-> Server
message SignedUp {
  int64 destination_id = 1;
  int64 sender_id = 2;
  enum SignUpStatus {
    PASSED = 0;
    FAILED = 1;
  }
  SignUpStatus status = 3;
  string username = 4;
  int64 user_id = 5;
}

// Server -( Init )-> Client
message SendInfo {
  int64 destination_id = 1;
  int64 sender_id = 2;
  UserInfo user = 3;
  repeated UserInfo others = 4;
  repeated ConvInfo conversation = 5;
}





/*****************************************************************************
 *                       Server and Client Messages                          *
 *****************************************************************************/
// Message send from the server to a client
message MessageServer {
  oneof payload {
    SignedIn signed_in = 1;
    SignedOut signed_out = 2;
    SignedUp signed_up = 3;
    SendInfo send_info = 4;
  }
}

// Message send from a client to the server
message MessageClient {
  oneof payload {
    SignIn sign_in = 1;
    SignOut sign_out = 2;
    SignUp sign_up = 3;
  }
}
